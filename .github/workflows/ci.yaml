name: CI
on:
  push:
    branches: [main]
    tags: [v*]
  pull_request:
    branches: [main]
jobs:

  unit-tests:

    name: Unit Tests
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot'
    steps:

    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Setup Go 1.19
      uses: actions/setup-go@v3
      with:
        go-version: '^1.19'

    - name: Cache Go Modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go

    - name: Download Go Modules
      shell: bash
      run: go mod download -x

    - name: Run Static Analysis
      shell: bash
      run: make lint

    - name: Run Unit Tests
      shell: bash
      run: make test

  build:

    name: Build and Publish
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot' && github.event != 'pull_request'
    needs: unit-tests
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
      REPO: ghcr.io
      OWNER: tinyzimmer
      PACKAGE_NAME: vault-rbac-controller
      BUILD_PLATFORMS: linux/amd64,linux/arm64,linux/arm,darwin/amd64,darwin/arm64,windows/amd64
    steps:

    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Setup Go 1.19
      uses: actions/setup-go@v3
      with:
        go-version: '^1.19'

    - name: Cache Go Modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go

    - name: Download Go Modules
      shell: bash
      run: go mod download -x

    - name: Build Release Binaries
      shell: bash
      run: make dist

    - name: Get Image Tags
      shell: bash
      id: tags
      run: |
        if [[ "${{ github.ref_name }}" == "main" ]] ; then
          echo TAGS=${REPO}/${OWNER}/${PACKAGE_NAME}:latest >> ${GITHUB_OUTPUT}
        else
          echo TAGS=${REPO}/${OWNER}/${PACKAGE_NAME}:latest,${REPO}/${OWNER}/${PACKAGE_NAME}:${{ github.ref_name }} >> ${GITHUB_OUTPUT}
        fi

    - name: Setup cosign
      uses: sigstore/cosign-installer@main

    - name: Setup Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REPO }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    -  name: Build and push
       uses: docker/build-push-action@v3
       id: build
       with:
         push: true
         context: .
         tags: ${{ steps.tags.outputs.TAGS }}
         platforms: ${{ env.BUILD_PLATFORMS }}

    - name: Sign Container Images
      shell: bash
      env:
        COSIGN_EXPERIMENTAL: '1'
      run: cosign sign --recursive ${REPO}/${OWNER}/${PACKAGE_NAME}@${{ steps.build.outputs.digest }}
