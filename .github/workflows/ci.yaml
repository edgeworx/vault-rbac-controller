name: CI
on:
  push:
    branches: [main]
    tags: [v*]
  pull_request:
    branches: [main]

jobs:

  tests:

    name: Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:

    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Setup Workflow
      uses: ./.github/actions/setup

    - name: Run Tests
      shell: bash
      run: make lint test

  build:

    name: Build and Publish Artifacts
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot' && github.event != 'pull_request'
    needs: tests
    permissions:
      contents: read
      id-token: write
      packages: write
    env:
      REGISTRY: ghcr.io
      REPO: tinyzimmer/vault-rbac-controller
      BUILD_PLATFORMS: linux/amd64,linux/arm64,linux/arm
    steps:

    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup Workflow
      uses: ./.github/actions/setup

    - name: Build Release Binaries
      shell: bash
      run: make dist

    - name: Get Image Tags
      shell: bash
      id: tags
      run: |
        if [[ "${{ github.ref_name }}" == "main" ]] ; then
          echo TAGS=${REGISTRY}/${REPO}:latest >> ${GITHUB_OUTPUT}
          echo SIGN=${REGISTRY}/${REPO}:latest >> ${GITHUB_OUTPUT}
        else
          echo TAGS=${REGISTRY}/${REPO}:latest,${REGISTRY}/${REPO}:${{ github.ref_name }} >> ${GITHUB_OUTPUT}
          echo SIGN=${REGISTRY}/${REPO}:${{ github.ref_name }} >> ${GITHUB_OUTPUT}
        fi

    - name: Setup Cosign
      uses: sigstore/cosign-installer@main

    - name: Setup Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    -  name: Build and Push Container Images
       uses: docker/build-push-action@v3
       id: build
       with:
         push: true
         context: .
         tags: ${{ steps.tags.outputs.TAGS }}
         platforms: ${{ env.BUILD_PLATFORMS }}

    - name: Sign Container Images
      shell: bash
      env:
        COSIGN_EXPERIMENTAL: '1'
        PACKAGE: "${{ steps.tags.outputs.SIGN }}@${{ steps.build.outputs.digest }}"
      run: set -x ; cosign sign --recursive ${PACKAGE}
